

<h1>CHANGELOG</h1>
This is a fairly major update to Olex2. The major changes are outlined below.<br><br><font size='4' color='#004080'><b>Reworked Help System for the GUI</b></font><br>You may have noticed that the help system looks different to what it used to be. It is also much more complete -- although nowhere as complete as we would like it to be.The entire help system is generated from MarkDown files which are available from <b><a href='shell https://github.com/Olex2/help/tree/master/gui/EN'><font color='#205c90'>GITHUB</font></a></b>,where these files render into some very readable format. This also means: anyone can contribute to our help system -- please request commit permission from us and we will welcome you as a valued contributor. In the long term, we are also planning to make this help available in different languages -- if you can help with a translation, please also let us know.<br><br><font size='4' color='#004080'><b>New HAR</b></font><br>The Hishfeld Atom Refinement team around <strong>Simon Grabowsky</strong> and <strong>Dylan Jyatilaka</strong> have been working hard to update this exciting new refinement program. It is available through Olex2 from Tools &gt; HARt.<br><br><font size='4' color='#004080'><b>EXTI</b></font><br>Sometimes it is necessary to refine the extinction, and sometimes it is not. Olex2 now makes this decision automatically (it refines EXTI if the value is twice it's e.s.d.). If un-tick the box, EXTI will <strong>not</strong> be refined, and if you <em>re-tick</em> the box, it <strong>will</strong> be refined. You are in control!<br><br><font size='4' color='#004080'><b>No more _publ_* items in the CIF</b></font><br>After many discussions with publishers, the IUCr and the CCDC, we have decided to remove all items starting with _publ_* from our CIF files. These have been replaced with _audit_* instead. This makes a lot of sense: each structure is a 'stand-alone' piece of work and its authors should be clearly known and acknowledged, regardless of where this structure will eventually end up. More info on <b><a href='shell https://www.iucr.org/<em>_data/iucr/cifdic</em>html/1/cif<em>core.dic/Caudit</em>author.html'><font color='#205c90'>_audit_author</font></a></b> here

<h1>EXTENSION_MODULES</h1>
The <strong>Extension Modules</strong> provide either functionality or make commonly used tasks easier to use. We are currently working on a number of these modules and will make them available for testing as they are ready. You are welcome to test and use them, provided you agree to the following conditions:<ol><li>We take no responsibility for any modules that are in the testing phase. Please use your own discretion and check everything carefully!</li><li>Please tell us about bugs and suggest improvements.</li><li>Testing modules will be available for 30 days. After this period, you may get a new version of the module two more times (30 days each). After this period, you must contact us to continue using/testing the modules.</li><li>Some of these modules will not be available free of charge after the end of the testing phase.</li></ol><br><br><font size='4' color='#004080'><b>Email</b></font><br>You must enter a <strong>valid e-mail address</strong>, select the module you wish to test and then press the button below. An e-mail will be sent to you and you need to <strong>activate it from the link in the e-mail</strong>. After activation, go back to this tool here and select the requested module again from the drop-down menu. This will install the module, which will be available <strong>after restarting Olex2</strong>.<br><br><font size='4' color='#004080'><b>Reference</b></font><br>This can be any text for your records and that will help you identify the machine where the module has been installed to. Typically this is something like <em>My Work Computer</em>.<br><br><font size='4' color='#004080'><b>Modules</b></font><br>All extension modules that are available for this version of Olex2 (version number and also alpha, beta or release) will be listed here. Select the module you are interested in and the 'Please Choose a Module' button will change to 'Install'. Press this button to start the installation.

<h1>SETTINGS-TARGET</h1>
The main settings for Olex2

<h1>ATOM_SETTINGS</h1>
Some attributes of how atoms are displayed in Olex2 can be modified within a specific style.<br><br><font size='4' color='#004080'><b>Atom Radius</b></font><br>Change the radius of the selected atoms (in PERS mode). Clicking on 'SET' will make this the default. The atom radius can be set manually be set with the <strong>arad</strong> and <strong>azoom</strong> commands.<br><br><font size='3' color='#004080'><b>arad</b></font>: &nbsp;This parameter affects the radius of the selected (or all, if there is no selection) atoms <em>in Ball and Stick</em> (PERS) mode only. Typically, the radius in PERS mode is taken from a definition file (and isn't the same for all elements). <strong>arad</strong> overrides these settings. A typical value for H atoms would be<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=arad 0.2","hint=arad 0.2","onclick=arad 0.2","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sets the radius of the selected atoms(s) to a value of 0.2</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>azoom</b></font>: &nbsp;This <em>zooms</em> the displayed atom sizes regardless of whether the atoms are shown in <em>Ball and Stick</em>* (PERS) or <em>Ellipsoid</em> (TELP) modes. This value is given in percent - and scales the selected atoms.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=azoom 120","hint=azoom 120","onclick=azoom 120","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Scales the selected atom(s) to 120 percent</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=azoom 100","hint=azoom 100","onclick=azoom 100","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Scales the selected atom(s) to 100 percent</td></tr></tbody></table>100 shows the original atom size, larger/smaller values vary the display accordingly.<br><br><b><font color='$spy.GetParam(gui.red)'>Note: </font></b> This can play havoc with the ORTEP '50 PERCENT probability' convention. In order to ensure that all atoms are shown with the standard probability, please use<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=telp 50","hint=telp 50","onclick=telp 50","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sets the ADP display to a 50 percent probability level</td></tr></tbody></table>-- and if a different probability is desired, use that, e.g.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=telp 30","hint=telp 30","onclick=telp 30","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sets the ADP display to a 30 percent probability level</td></tr></tbody></table>

<h1>BOND_SETTINGS</h1>
<br><br><font size='4' color='#004080'><b>Bond Width</b></font><br>Change the radius of the selected bonds. Clicking on 'SET' will make this the default. Please note that this will change the radius of <em>all bonds of the same type</em>.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=individualise","hint=individualise","onclick=individualise","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If you wish to set the radius of a single occurrence of a bond, you must select the bond and type this command first.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Style</b></font><br>An overall style setting for all atoms.<br><br><font size='4' color='#004080'><b>Bond Colour</b></font><br>Choose the colour of the bonds here. The default is <em>elements</em> -- which means that half the bond will be the colour of one atom and the other half the colour of the other atom.

<h1>BACKGROUND</h1>
A choice of different backgrounds is available for Olex2. Depending on the context, sometimes a dark background works better than a light one, and sometimes a graduated background is best. It is easy to switch between them.<br><br><font size='4' color='#004080'><b>Solid Colour/White</b></font><br><strong>F2</strong> will toggle between the solid colour background (as defined in the scene settings) and a solid white background.<br><br><font size='4' color='#004080'><b>Graduated Background</b></font><br><strong>F4</strong> toggles between the solid background and the graduated background.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grad","hint=grad","onclick=grad","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sets the colour of the four corners of the graduated background.</td></tr></tbody></table>With <strong>grad -p n.png</strong> you can set a  background picture.

<h1>GUI_WIDTH</h1>
The width of the GUI (by which we mean the panel with all the commands on) can be adjusted to suit your needs. Try the built-in links, but you can also enter any arbitrary value. The font-size of the items on the GUI will also adjust.<br><br><zimg width="252.6" src="BaseDir()\util\pyUtil\gui\help\images/gui.jpg" alt="0.6 The Olex2 GUI" /><br><br><font size='4' color='#004080'><b>Value &lt; 1</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=panel 0.33","hint=panel 0.33","onclick=panel 0.33","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>The GUI width will adjust as a fraction of the screen width <strong>0.33</strong> will divide Olex2 into 2/3 molecule and 1/3 GUI.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Value &gt; 100</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=panel 520","hint=panel 520","onclick=panel 520","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>The absolute GUI width in pixels.</td></tr></tbody></table>

<h1>GUI_SIDE</h1>
Set whether the GUI should be on the left or right of the screen

<h1>GUI_LINKS</h1>
Set whether some of the links on the GUI are displayed as buttons or as hyperlinks.

<h1>TOOLTIPS</h1>
If selected, tooltips will be shown when hovering over items.

<h1>LEGEND</h1>
A pictogram of all current atom types appears in the main window. With the left mouse and the pressed SHIFT key, this can be moved to any position.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=legend","hint=legend","onclick=legend","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Switch the legend on or off.</td></tr></tbody></table>

<h1>INFO_BAR</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showwindow info","hint=showwindow info","onclick=showwindow info","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If selected, more information on a structure is shown in the top panel.</td></tr></tbody></table>

<h1>RESET_ALERTS</h1>
All hidden alerts will be reset.

<h1>CONSOLE_LINES</h1>
In order to avoid too much clutter on the GUI, we have decided to provide the console output behind the molecule. Here you can set the number of lines of output you would like to see. The commands:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=lines 10","hint=lines 10","onclick=lines 10","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>will set the console to only show 10 lines.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=lines -1","hint=lines -1","onclick=lines -1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>will show all lines.</td></tr></tbody></table>

<h1>FADER</h1>
When ticked, structures will slowly fade in and out.

<h1>AUTO_SAVE_VIEW</h1>
When active, drawing settings such as styles and backgrounds will be saved with the structure. This is somewhat experimental; if things go wrong, you may have to reload the chosen style for that particular structure.When this option is <strong>not</strong> active, then a structure will be loaded with the same style as the previous structure.

<h1>START_OLEX2_IN</h1>
On startup, Olex2 will go straight to the chosen tab.

<h1>SOLO_MODE</h1>
When opening a new Tool, all other open tools will automatically be closed.

<h1>CLOSE_SETTINGS</h1>
I'll write some help about this one once I figured out what this is supposed to do.

<h1>MODULES_UPDATE_NOTIFICATION</h1>
If updates to extension modules are availabe, a pop-up box will appear after Olex2 is started. This can be switched off here.

<h1>UNIT_CELL_STYLE</h1>
The unit cell can be displayed in different ways. First, the cell must be visible:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=cell","hint=cell","onclick=cell","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Switches the unit cell display on</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Cylinder</b></font><br>The unit cell box will be made out of cylinders (i.e. 3-D objects)<br><br><font size='4' color='#004080'><b>Lines</b></font><br>The unit cell box will be composed of simple Lines.<br><br><font size='4' color='#004080'><b>Width</b></font><br>This sets the thickness of the cylinders or lines.<br><br><font size='4' color='#004080'><b>Colour</b></font><br>Right-Click on either the cylinders or lines, then choose <strong>Draw Styles</strong>. For the lines, there is only a single object to set, for the cylinders, the little spheres in the corners as well as the cylinders themselves can be set independently.

<h1>USER_DATABASE</h1>
Olex2 supports a database of people and their institutions. You can set the location of this sqlite database here (a restart is required) and you can also manage your database from here.

<h1>ENABLE_NETWORK</h1>
If this box is not ticked, then Olex2 will not communicate with the internet at all, except for checking for updates on startup.

<h1>DEBUG_MODE</h1>
This setting is for developers only. Please leave this switch to <em>off</em>, unless you know what you are doing.

<h1>PATH</h1>
Semicolon-separated strings entered in this box will be added to the <strong>System Path</strong> as new values <strong>before</strong> any existing folders -- this means: any crystallographic software in the folders listed here will be found by Olex2 <em>first</em> and therefore will be used.

<h1>START-TARGET</h1>
Start here!
- Sample Structures
- Open Existing File

<h1>OPEN_A_STRUCTURE</h1>
Olex2 can read many different crystallographic file formats. When  you are working with a crystal structure, the most common way to get into it is by means of opening an ins file. Typically, an hkl file of the same filename would have been created by your data processing software at the same time. If this pair of files is present, you are all set to go.<br><br><font size='4' color='#004080'><b>Navigate</b></font><br>You can navigate to a file by clicking on the link under the Start tool, or by using <strong>File &gt; Open</strong> from the menu bar at the top of Olex2.<br><br><font size='4' color='#004080'><b>Drag and Drop</b></font><br>Alternatively, you can drag and drop any recognised file into Olex2. This file will then be opened, and the current directory will be set to the one where the file was  dragged from.<br><br><font size='4' color='#004080'><b>Command Line</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=reap","hint=reap","onclick=reap","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Open a file via the file browser. This command can be followed by a filename: <strong>reap sucrose.ins</strong>, for example</td></tr></tbody></table>

<h1>SAMPLE_STRUCTURES</h1>
We provide some sample structures for you to experiment with. These sample structures are copied into your Olex2 user area on start-up. If you delete the them, they will come back in their original state on restart.<br><br><font size='4' color='#004080'><b>Sucrose <b><a href='shell https://youtu.be/8QvmKSnJFPs'><font color='#205c90'><zimg src='$GetVar(help_path)/images/youtube_s.png'></font></a></b></b></font><br>This very simple structure of sucrose (from our coffee room...) is an ideal structure to get started with.<br><br><font size='4' color='#004080'><b>THPP <b><a href='shell https://youtu.be/Ruwyh3xmBME'><font color='#205c90'><zimg src='$GetVar(help_path)/images/youtube_s.png'></font></a></b> <b><a href='shell https://youtu.be/Gm7KWPDFRUw'><font color='#205c90'><zimg src='$GetVar(help_path)/images/youtube_s.png'></font></a></b></b></font><br>An example of a simple disordered structure.<br><br><font size='4' color='#004080'><b>Co110</b></font><br>A simple transition element complex.<br><br><font size='4' color='#004080'><b>ZP2</b></font><br>A structure with Z' = 2.<br><br><font size='4' color='#004080'><b>Water</b></font><br>A metal complex with bound water molecules and one molecule of water of hydration.<br><br><font size='4' color='#004080'><b>183 <b><a href='shell https://youtu.be/wb_cgFRSbYk'><font color='#205c90'><zimg src='$GetVar(help_path)/images/youtube_s.png'></font></a></b></b></font><br>A tricky disorder across a symmetry element.<br><br><font size='4' color='#004080'><b>Timmy</b></font><br>A continuous solid: Calcium Tartrate.

<h1>DOCUMENTATION</h1>
We are in the process of getting all Olex2 documentation into a unified format. In the meantime, we apologize for the slightly haphazard state of our documentation.<br><br><font size='4' color='#004080'><b>Inline Help</b></font><br>Since you are reading this, you have found the little info symbols. All tools should now have one of these help links. This is your first port of call if you are stuck.<br><br><font size='4' color='#004080'><b>Help Document</b></font><br>We also provided a help document, which is shipped with this version of Olex2 and is linked on the GUI.<br><br><font size='4' color='#004080'><b>Online Help</b></font><br>An increasing amount of online help is also available. Please try out a Google Search, and you will find a lot of third-party material about Olex2.

<h1>BAD-REFLECTIONS-TARGET</h1>
Tools for dealing with reflections that do not fit well

<h1>OMIT_REFLECTIONS</h1>
The 'OMIT' button allows you to omit all reflections where Error/esd &gt; than value in the box. The 'Clear omits' clears <strong>all</strong> omits -- all previously omitted reflections will be back for refinement (except those that are omitted with a general OMIT, e.g. 'OMIT -3 52')

<h1>BAD_REFLECTIONS_SORTING</h1>
No entry

<h1>BAD_REFLECTIONS</h1>
<strong>A list of those reflections that have been flagged by the refinement program ShelXL will be shown in this panel.</strong><br><br><font size='4' color='#004080'><b>Omit all equivalents of a reflection</b></font><br>You may choose to omit a reflection totally by pressing the OMIT link. This will insert the appropriate OMIT instruction.<br><br><font size='4' color='#004080'><b>Omit a particular instance of a reflection</b></font><br>You can also choose to omit a particular reflection (e.g. because it was under the beam-stop). To do so, click the <a href=edithkl>Edit Reflections</a> link at the bottom of the list of bad reflections. This will bring up a window with all the reflections in your reflection file, grouped by equivalent reflections. By adding the minus symbol '-' in front of a particular reflections, this reflection will be moved to the bottom of the hkl file (after the '0 0 0' instruction, which tells the refinement program to ignore it.

<h1>EXCLUDE_HKL</h1>
Conditions for reflections to be excluded can be set here<br><br><font size='4' color='#004080'><b>Standard Mode (OR)</b></font><br>This will exclude all reflections where h, k, and l fulfill the conditions you specify independently<br><br><font size='4' color='#004080'><b>AND Mode</b></font><br>When the 'AND' tickbox is ticked, the conditions you specify for h, k and l have to be fulfilled simultanesoulsy in the same reflection

<h1>EDIT_REFLECTIONS</h1>
This will display your hkl data sorted by the 'worst fitting' reflections. The Each equivalent occurance of this reflection is shown separately and you can 'omit' just that occurance from the refinment, rather than omit the entire reflection (Olex2 will move it to the end of the file, past the '0 0 0' line). This is particularly useful if you would otherwise omit an entire important reflections.Please put the '-' character in the front of a reflection you wish to omit and remove this character if from an 'omitted' reflection in order to include it in the refinement again.

<h1>ELECTRON-DENSITY-PEAK-SLIDER-HELP</h1>


<h1>ELECTRON_DENSITY_PEAK_SLIDER</h1>
Move the slider to the left to filter out strongest peaks first, or to the right to filter out weakest peaks first. You can then do things like:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name \$Q C","hint=name \$Q C","onclick=name \$Q C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will only apply to the currently visible peaks.</td></tr></tbody></table>The same goes for the 'Select' and 'Delete' buttons.

<h1>ELECTRON_DENSITY_TRANSPARANCY_SLIDER</h1>
The relative peak height is displayed by altering the transparency of the displayed peaks, scaled to the strongest peak. This means that it is very easy to identify when heavy (or non-hydrogen) atoms are missing from your structure.<br><br><font size='3' color='#004080'><b>Adjust transparency</b></font>: &nbsp;With this slider, you can adjust the transparency of the electron density peaks.

<h1>ELECTRON_DENSITY_PEAKS</h1>
Click on these bars to select the corresponding peaks.

<h1>REFINEMENT-INDICATORS-HELP</h1>


<h1>REFINEMENT_INDICATORS</h1>
Information about your data and refinement. If any of these standard indicators are clearly too far off the expected values, these values will appear in a red colour. It's also worth noting that the term 'refinement indicators' is not quite correct, because some of the information summarized here is actually solely related to the diffraction data.

<h1>REFLECTION_FILE</h1>
Olex2 will manage the reflection file against which you want to refine your model. Select the file from the drop-down menu and this is the file that will be used.

<h1>REFLECTION_GRAPH</h1>
These diagnostic graphs can be very useful when you run into problems with your structure. Please note that some of the graphs available from here are purely a function of the diffraction data, while other's take your model into account. The header 'Reflection Statistics' is therefore not strictly-speaking true -- but calling it only 'Statistics' doesn't seem quite right either!<br><br><font size='3' color='#004080'><b>Wilson Plot</b></font>: &nbsp;A statistical comparison of the observed intensity data with the theoretical distribution for a random atomic arrangement, since the atomic scattering decreases with increasing 2&Theta;. Establishes an overall displacement parameter for the structure, B and scale factor for the data, k.<br><br><font size='3' color='#004080'><b>Cumulative Intensity</b></font>: &nbsp;Provides an indication of whether the data is centric or acentric.<br><br><font size='3' color='#004080'><b>Systematic Absences</b></font>: &nbsp;This plots the intensity distribution for any reflections that should be systematically absent. The intensities of these reflections should be very low and insignificant considering the error of the reflection.<br><br><font size='3' color='#004080'><b>Fobs-Fcalc</b></font>: &nbsp;This should be a straight line with Fobs about equal to Fcalc, i.e.the gradient of the line should be about 1 and the intercept at about 0. Any omitted data are shown in grey. If a reflection appears to be an outlier hovering over it gives relevant information in the following format (Fobs, Fcalc)(h, k, l).<br><br><font size='3' color='#004080'><b>Fobs/Fcalc</b></font>: &nbsp;Plotted against resolution should be around 1.0.<br><br><font size='3' color='#004080'><b>Completeness</b></font>: &nbsp;Plots the percentage completeness against the resolution. For good data this should be about 100% complete in all regions.<br><br><font size='3' color='#004080'><b>Normal probability</b></font>: &nbsp;This plots the ordered weighted deviations, w(Fobs^2 - k * Fcalc^2), against the deviations that would be expected if the errors in the data are normally distributed. If the errors are truly normally distributed, then this plot should be linear with a slope of one and zero intercept. Significant departures from this ideal may indicate problems with your dataset, model, or weighting scheme.<br><br><font size='3' color='#004080'><b>Scale factor vs resolution</b></font>: &nbsp;These should be approximately constant around 1.0 across the whole data range, a low value at high values of 2&Theta; can indicate that the data is weak or not present in that region.<br><br><font size='3' color='#004080'><b>R1 factor vs resolution</b></font>: &nbsp;This value will increase for higher angle data. If there are any sudden changes, this can indicate problems with your data.<br><br><font size='3' color='#004080'><b>Bijvoet Differences Probability Plot</b></font>: &nbsp;Similarly to the 'Normal probability' plot above, this plots the ordered deviations between the observed and calculated Bijvoet differences. Frequently it is observed that this plot can deviate from linearity, suggesting that the errors are not normally distributed. Hooft et. al (2010) suggested that a Student's 't' distribution may better describe the errors in the Bijvoet differences. Olex2 can calculate this plot for both the normal and Student's 't' distribution, allowing you to judge whether or not a Student's 't' distribution is a better model for the errors in your data.<br><br><font size='3' color='#004080'><b>Bijvoet Differences Scatter Plot</b></font>: &nbsp;This plots the calculated Bijvoet differences, Fcalc^2(+) - Fcalc^2(-), against the observed Bijvoet differences, Fobs^2(+) - Fobs^2(-), along with error bars indicating the uncertainty in the measurement of the Bijvoet differences. For a correct, strongly determined absolute structure, this plot should form a positive slope, with gradient close to 1. A negative slope for this plot can indicate incorrect assignment of the absolute structure, and you should try inverting your structure using:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=inv -f","hint=inv -f","onclick=inv -f","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td></td></tr></tbody></table>

<h1>REFLECTION-STATISTICS-SUMMARY-HELP</h1>


<h1>REFLECTION_STATISTICS_SUMMARY</h1>
A summary of the most important indicators of your reflection data. These are independent from your model or refinement.

<h1><TARGET>OLEX2_PROVIDES_A_VARIETY_OF_CHEMICAL_TOOLS._HERE_THEY_ARE:</TARGET></h1>


<h1>CALCULATE_CHN_ANALYSIS</h1>
<table width='100%%'><tbody><tr><td width='25%%'>calcCHN()</td><td>Calculates the expected values of a CHN analysis from your structure model.</td></tr></tbody></table>

<h1>CALCULATE_MOLECULAR_ISOTOPE_PATTERN</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=calcms","hint=calcms","onclick=calcms","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Simulates a molecular isotope pattern for your structure.</td></tr></tbody></table>

<h1>CALCULATE_MOLECULAR_VOLUME</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=vvol()","hint=vvol()","onclick=vvol()","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Calculates the molecular volume of the structure.</td></tr></tbody></table>

<h1>CALCULATE_POLYHEDRAL_VOLUME</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=calcvol","hint=calcvol","onclick=calcvol","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Calculates the polyhedral volume of a polyheder that is defined by the selected atom.</td></tr></tbody></table>

<h1>CALCULATE_BOUNDING_BOX</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=wbox","hint=wbox","onclick=wbox","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>A rectangular bounding box is calculated for your molecule and displayed on the screen.</td></tr></tbody></table>

<h1>FRAGMENT_LIBRARY</h1>
This link will open in your default internet browser. Fragments contained in this library can be copied and pasted straight from the web into Olex2.<br><br><font size='4' color='#004080'><b>Pasted fragments</b></font><br>These will appear in a strange green colour, and you can then anchor them onto electron density peaks by first clicking on an atom in the imported fragment and then on the corresponding Q-peak. Repeat this progress with another atom/Q pair until a reasonable match is achieved.<br><br><font size='4' color='#004080'><b>Exit matching mode</b></font><br>Press <strong>Esc</strong> repeatedly, or press the <strong>Esc</strong> link in the orange mode box to get out of this matching mode.

<h1>LINK_SELECTED</h1>
<strong>Two</strong> Selected atoms will be 'linked' in the refinement.<br><br><font size='4' color='#004080'><b>Occupancies</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fvar sel","hint=fvar sel","onclick=fvar sel","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>The occupancies will be linked such that the individual occupancies add up to unity.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Parts and Occupancies</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=part -p=2 -lo sel","hint=part -p=2 -lo sel","onclick=part -p=2 -lo sel","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>The occupancies will be linked such that the individual occupancies add up to unity, and the selected atoms will be added to Parts.</td></tr></tbody></table><strong>Note</strong>: the -p parameter determines the number of parts that should be assigned. -lo stands for 'link occupancy'.

<h1>LINK_CONSTRAINTS</h1>
Link Parts, Occupancies and apply either and EADP constraint or ISOR restraint to selected atoms.

<h1>LINK_PARTS_1</h1>
Assign selected atoms to the part number selected.

<h1>LINK_PARTS_2</h1>
TBI

<h1>SHOW_PARTS</h1>
If your structure contains atoms that have been assigned to parts, then it is sometimes useful to look only at atoms belonging to the same part.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showP 1","hint=showP 1","onclick=showP 1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show only atoms belonging to Part 1.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showP 0 2","hint=showP 0 2","onclick=showP 0 2","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will only show atoms that don't belong to a Part and those that belong to Part 2.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showP 0","hint=showP 0","onclick=showP 0","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show all atoms.</td></tr></tbody></table>

<h1>FOLDER-VIEW-HELP</h1>


<h1>FOLDER_VIEW</h1>
Choose a parent folder for your structures. A tree-view of all sub-folders will appear here which makes browsing for structures easy.

<h1>HAR_REFINEMENT</h1>
HAR is super.

<h1>HFIX_QUICKMODES</h1>
This is one of the older tools in Olex2 and is due for refurbishment soon!Common Hydrogen constraints: hover over the little symbols and it will show you the constraints that will be inserted on the selected atoms (in Shelx-speak!). You can always type the code yourself after having made the selection.

<h1>TOOLBAR_HYDROGEN_2</h1>
This is one of the older tools in Olex2 and is due for refurbishment soon!<br><br><font size='4' color='#004080'><b>HFIX</b></font><br>You can enter any HFIX command in the box and then press the button - hydrogen atoms will be placed geometrically on subsequently clicked atoms according to your choice, regardless of the geometry involved.<br><br><font size='4' color='#004080'><b>H 'Improve'</b></font><br>Another command taken straight from the XP syntax. This will move the selected hydrogen atoms along the bond axis to the distance typed in the box (or the one selected from the pre-set values in the drop-down box. The distances in the box are typical bond distances as observed by neutron diffraction.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=himp 0.983","hint=himp 0.983","onclick=himp 0.983","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Is an example command of this.</td></tr></tbody></table>

<h1>TOOLBAR_HYDROGEN_3</h1>
This is one of the older tools in Olex2 and is due for refurbishment soon!<br><br><font size='4' color='#004080'><b>Add Hydrogen</b></font><br>This will geometrically place hydrogen atoms and constrain them depending on the environment the hydrogen atoms are in. If you want to refine them freely, select the atoms and type 'AFIX 0 $+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=HADD","hint=HADD","onclick=HADD","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")'<br><br><font size='4' color='#004080'><b>Show Hydrogen Labels</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -h -l","hint=labels -h -l","onclick=labels -h -l","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show all hydrogen labels.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Hide Hydrogen Labels</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -l","hint=labels -l","onclick=labels -l","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will hide all hydrogen labels.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Show AFIX constraints</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -h -a","hint=labels -h -a","onclick=labels -h -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will show the AFIX constraints.</td></tr></tbody></table>

<h1>HTAB_SLIDER</h1>
This slider extends the radius of the HTAB instuction that will be used.

<h1>HYDROGEN_BOND_SLIDER</h1>
Successive potential hydrogen bond interactions will be shown. Bit by bit, there will always be two growing bonds 'added' to your display -- and each newly added bond refers to the same interaction.

<h1>IMAGES</h1>
Olex2 can export images in a variety of formats and there are many options available. Atom labelling is also done from here. Options as to what to do if a picture file with the same name already exists are also provided.<br><br><font size='4' color='#004080'><b>Move Labels</b></font><br>You can move the labels using the left mouse button while holding the <strong>SHIFT</strong> key.<br><br><font size='4' color='#004080'><b>Delete Labels</b></font><br>In order to delete a label, make sure no atoms are highlighted (hit <strong>Esc</strong> first!) and then select the label(s) you wish to delete and hit the <strong>Delete</strong> key. You can select all labels by pressing <strong>Ctrl+A</strong> after you've selected <strong>one</strong> label.

<h1>BITMAP_IMAGES</h1>
Olex2 can produce bitmap images of your structures in a variety of formats. There is no limit to the size these bitmap images can take.<br><br><font size='4' color='#004080'><b>Colour Space</b></font><br>At the moment, Olex2 saves images in the RGB colour space. If you require CMYK images for your publications, you will find many image conversion services available on the web, where you can upload your RGB file and will get a CMYK file back.<br><br><font size='4' color='#004080'><b>Transparency</b></font><br>You can set the background to the structure as transparent -- but purely white parts of your structure will also become transparent. However, you can set the background of your image to some colour that does not occur in your structure (pink is a good choice) and it then becomes very easy to convert all pixels with that colour to a transparent background in something like PowerPoint. Of course, using professional image processing software also offers many options to achieve a transparent background.

<h1>BITMAP_IMAGE_ATTRIBUTES</h1>
These are the properties of the image that will be exported from Olex2. All images will end up in the current structure folder and will not contain any text that is displayed in Olex2 (other than labels, of course!)<br><br><font size='4' color='#004080'><b>Name</b></font><br>If the name box is empty, Olex2 will ask for the filename. Otherwise the given name will be used, regardless of whether the file already exists.<br><br><font size='4' color='#004080'><b>Formats</b></font><br>The default format is the png file format. This format offers lossless compression and is particularly suited to save images from Olex2 while keeping file sizes quite small. There really is no reason to use any other format at all.<br><br><font size='4' color='#004080'><b>Size</b></font><br>There is no limit to the size of the exported bitmap file. If the number given is smaller than 100, the size refers to a multiple of the screen-size. Otherwise it refers to the width of the image in pixels.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=pict fred.png 300","hint=pict fred.png 300","onclick=pict fred.png 300","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Creates a png image called <strong>fred.png</strong> with a width of 300px</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Bitmap Image Trim</b></font><br>The image will be cropped, so that the molecule will fill the image properly.<br><br><font size='4' color='#004080'><b>Bitmap Atom Label Fonts</b></font><br>Set the font for the atom labels here.

<h1>POSTSCRIPT_IMAGES</h1>
Some would argue that there is no better way to represent a crystal structure on paper than a clear black and white ORTEP drawing. You can make these drawings using Olex2.<br><br><font size='4' color='#004080'><b>ORTEP</b></font><br>There are very many different options for generating ORTEP-style drawings. Many of these can be set from this GUI, for some more exotic options you may have to consult the manual of Olex2.

<h1>POVRAY_IMAGES</h1>
POVRAY is a popular format that exports your structure as a 3-D object. Not only can you do beautiful images with rendered shadows and backgrounds with this, but you can make 3-D animations (provided you know PORVRAY!).<strong>There are no options here</strong>. Olex2 will export a POVRAY file and you will have to deal with this file yourself!<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=pictPR filename.pov","hint=pictPR filename.pov","onclick=pictPR filename.pov","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Saves the popvray output file 'filename.pov'</td></tr></tbody></table>

<h1>IMAGE_SERIES</h1>
Exports a series of images, that can be put together in a movie.

<h1>MAP_HEADER</h1>
<br><br><font size='4' color='#004080'><b>Available Display Modes</b></font><br><br><br><font size='3' color='#004080'><b>contour, plane</b></font>: &nbsp;This is an interactive slice of the map in the plane of the screen. The molecule can be rotated and also zoomed through this plane. This is done by holding down the <strong>SHIFT</strong> key while dragging the left mouse key on the area of the map or using the depth slider. The visible area of the map can be adjusted with the size slider, or by holding down the <strong>Ctrl</strong> key whilst dragging the right mouse key. Finally, the levels can be adjusted with the <strong>SHIFT</strong> key and right mouse key. In contour mode, the number of contours can be altered with the contours slider. Positive electron density is displayed as solid lines, whilst negative electron density (holes) are displayed as dashed lines. A contour map will be included in any postscript drawing created whilst the map is displayed.<br><br><font size='3' color='#004080'><b>surface, wire, point</b></font>: &nbsp;These are all three dimensional displays of the electron density. However, the 3D display will only work if there is enough electron density to display, otherwise the 2D display will the shown. It is a good idea to start adjusting the levels in the points view, and only then to select wire or surface for a graphically more demanding display. Negative values of electron density (holes) will be displayed in a reddish colour. The extended mode will extend the grid to an array of 27 (3 x 3 x 3) unit cells.<br><br><font size='3' color='#004080'><b>Extended</b></font>: &nbsp;Will extend the map display out from the unit cell.<br><br><font size='3' color='#004080'><b>Edit Style</b></font>: &nbsp;Edits the colour of the various map surfaces.<br><br><font size='3' color='#004080'><b>Select Volume</b></font>: &nbsp;A box with moveable sides will appear. Left-click on the coloured areas and then move the sides while pressing the <strong>SHIFT</strong> key. The map will be calculated only inside the defined box. You can delete the box by right-clicking on it and select 'Hide'.<br><br><font size='3' color='#004080'><b>Level</b></font>: &nbsp;When a map is displayed the slider bar enables you to adjust the detail shown in the map.

<h1>CALCULATE_VOIDS</h1>


<h1>CALCULATE_VOIDS</h1>
Calculates the voids and channels in the structure. This calculation is based on the Olex2 internal libraries, and help is available from<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=help calcvoid","hint=help calcvoid","onclick=help calcvoid","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td></td></tr></tbody></table>

<h1>CALCULATE_SOLVENT_ACCESSIBLE_VOIDS</h1>


<h1>CALCULATE_SOLVENT_ACCESSIBLE_VOIDS</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=calcsolv","hint=calcsolv","onclick=calcsolv","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Calculates the solvent accessible voids. This calculation is based on the smtbx/cctbx Olex2 libraries.</td></tr></tbody></table>Calculates voids that are large enough to contain solvent. Probe/&Aring; adjusts the probe size (think of it as a 'sphere' rolling about the structure - a smaller sphere will fit into smaller gaps and therefore return a larger void than a larger sphere would). The Grid/ANGST is the resolution of the map that will be explored when calculating the voids. If the resolution is too high, the calculation might take a Very Long Time at not much benefit. Click on Void to toggle between displaying and not displaying solvent accessible voids. On the graphics screen the size of any solvent accessible voids that are found will be displayed.

<h1>ELECTRON_DENSITY</h1>
TBI

<h1>MASKS-HELP</h1>


<h1>MASKS</h1>
The Masks option serves as an alternative to SQUEEZE which is implemented in Platon !!!More Info Online!!!. These sorts of approaches should only be used when the solvent can't be identified or modelled, effort should be made to try and identify or model solvent. If refinement has been attempted using both ShelXL and olex2.refine the option to select either olex or an fcf files, ensure that the file from the last cycle of refinement is used.

<h1>MATCH_1</h1>
There are various matching tools available. Please have a look at our online documentation for more info. !!!More Info Online!!!<br><br><font size='4' color='#004080'><b>Match All Fragments</b></font><br>Where more than 1 of the same fragment is present in a structure, Olex2 will automatically overlay the fragments on the screen and calculate an RMSD deviation for the fragments which is displayed on the graphics screen with and without inversion. Alternatively type 'match'.<br><br><font size='4' color='#004080'><b>Unmatch</b></font><br>To return to unmatched fragments or type 'fuse'.

<h1>MATCH_3</h1>
Select 3 atoms in the first fragment and then 3 atoms in the second fragment in the order to be matched and Olex2 will overlay the fragments. To return to the unmatched structure click on UnMatch or<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fuse","hint=fuse","onclick=fuse","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Unmatches the structure</td></tr></tbody></table>

<h1>MATCH_4</h1>
<br><br><font size='4' color='#004080'><b>Overlay Structure</b></font><br>Enables the files for the second structure to be loaded, the two structures will then appear on the right and left hand side of the screen. A maximum of three pairs of atoms from the two structure can be selected. The first pair of atoms are superimposed, the second one causes the rotation to minimize the distance between the atoms of the second pair, the third pair causes rotation around the line formed by the first and second pair to minimize the difference between the atoms of the third pair.<br><br><font size='4' color='#004080'><b>Mode Match</b></font><br>This mode enables interactive matching by a maximum of three pairs of atoms. The first pair of atoms are superimposed, the second one causes the rotation to minimize the distance between the atoms of the second pair, the third pair causes rotation around the line formed by the first and second pair to minimize the difference between the atoms of the third pair. Type <strong>Esc</strong> to exit this mode.<br><br><font size='4' color='#004080'><b>Remove Overlay</b></font><br>Removes the second structure that has been added.

<h1>PLATON</h1>
TBI Platon-help

<h1>SHELX_CONSTRAINTS</h1>
These are the SHELX constraints. All of these will also apply to a refinement using the olex2.refine.

<h1>SHELX_RESTRAINTS</h1>
These are the SHELX restraints. All of these will also apply to a refinement using the olex2.refine.

<h1>DFIX</h1>
<br><br><font size='4' color='#004080'><b>DFIX d s[0.02] atom pair(s)</b></font><br>Fixes a distance <strong>d</strong> between pairs of atoms to a given value in &Aring; within an estimated standard deviation of &plusmn; <strong>s</strong> (standard setting 0.02 &Aring;)<br><br><b><font color='$spy.GetParam(gui.red)'>Note: </font></b> DFIX 1.54 0.01 C1 C2 C2 C3 C3 C4Gives a butane carbon atom chain with bond distances between 1.53 and 1.55 &Aring;.<br><br><br><zimg width="126.3" src="BaseDir()\util\pyUtil\gui\help\images/butane.jpg" alt="0.3 n-butane" />

<h1>SADI</h1>
<strong>SADI s[0.02] atom pairs</strong> <br><br>Fixes bond lengths between given atom pairs to a the same distance within an estimated standard deviation of &plusmn; <strong>s</strong> (standard setting 0.02 &Aring;).<br><br><strong>Example:</strong> <em>SADI 0.005 C1 F1 C1 F2 C1 F3</em><br><br>Models a CF<sub>3</sub> group with same C-F distances within 0.005 &Aring; deviation.

<h1>TWINNING-HELP</h1>


<h1>TWINNING</h1>
These two tools provide a quick way to assess whether twinning is present in your structure.<br><br><font size='4' color='#004080'><b>Search for Twin Laws</b></font><br>This will search for all metrically possible twin laws, and then refine your structure with each of these in turn (if any are found). You can then decide whether any of these give you a better R-factor than an untwinned refinement and then continue with that choice.<br><br><font size='4' color='#004080'><b>Cumulative Intensities</b></font><br>This will generate a graph of the cumulative intensities. If you data follows the bottom line, then your crystal is almost certainly twinned.

<h1>CALCULATE_MEAN_PLANE</h1>
Select atoms that you wish to define a plane for. A plane will be displayed in the ring and a centroid generated, all symmetry related planes will automatically be added to any other molecules on the screen.

<h1>CALCULATE_BEST_PLANE</h1>
Select atoms that you wish to define a line for. A line will be fitted and displayed as a 'bond'.

<h1>DISTANCES_AND_ANGLES</h1>
Displays the distance between atoms (for two selected atoms), the angle (for three selected atoms) or the torsion angle, angle and distance (for four selected atoms).

<h1>REFINE_WITH_E.S.D_INFO</h1>
Carries out a refinement to save the necessary information to display E.S.D information on parameters.

<h1>DISTANCES_AND_ANGLES_WITH_E.S.D</h1>
Displays the distance between atoms (for two selected atoms), the angle (for three selected atoms) or the torsion angle, angle and distance (for four selected atoms), all with an esd as long as a refinement to save the esd information has been carried out.

<h1>PI_PI_INTERACTIONS</h1>
Automatically searches for any p-p interactions in your structure. If found the relevant parameters are returned.

<h1>QUICK_DRAWING_STYLES</h1>


<h1>QUICK_DRAWING_STYLES</h1>
This tool allows you to quickly select from a number of preset drawing styles. If no atoms are selected, then the new style will apply to all atoms, otherwise it will apply only to the current selection.<br><br><font size='4' color='#004080'><b>Balls &amp; Sticks</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=pers","hint=pers","onclick=pers","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Atoms are shown as spheres. The size of the sphere depends on the radius of the atom type represented by the sphere.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Ellipsoids</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=telp n","hint=telp n","onclick=telp n","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244") where default n = 50%</td><td>Aniosotropic atoms are shown as ellipsoids. Isotropic atoms are shown as spheres, who'se size depends on the value of the Uiso of the individual atom represented by the sphere.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Wireframe</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=proj","hint=proj","onclick=proj","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>The structure is shown as a wireframe.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Sphere Packing</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sfil","hint=sfil","onclick=sfil","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Atoms are represented as space-filling spheres.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Tubes</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=tubes","hint=tubes","onclick=tubes","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Atoms are represented as connected tubes.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Default Style</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=default","hint=default","onclick=default","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All display settings are reset to the default values.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Polyhedra</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mask atoms 37","hint=mask atoms 37","onclick=mask atoms 37","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Shows the structure in a polyhedral representation.</td></tr></tbody></table>

<h1>ATOM_STYLES</h1>
The visual style of the atom display can be customised. Clicking on the link will display a periodic table, from where you can start customising your styles.<br><br><font size='4' color='#004080'><b>About Styles and Scenes</b></font><br>There are two types of style sheets in Olex2 - one deals with the atom objects (styles) and the other deals with the lighting and background settings (scene). Both have to be carefully tuned to each other in order to get good results. To load or save a style or scene, right-click on the background and then follow the relevant links.<br><br><font size='4' color='#004080'><b>Modify an Atom Style</b></font><br>Right-click on the atom, then select 'Graphics>Draw Styles'. The form you will see is quite complex, and you will have to experiment with it until you are familiar with what you can do.<br><br><font size='4' color='#004080'><b>Anisotropic Atoms</b></font><br>By default, the periodic table will open showing anisotropic atoms. Anisotropic atoms consist of the 'sphere' and the 'rims' - the visual properties of which can be set separately (see the drop-down box in the top right-hand corner of the 'Draw Styles' form).<br><br><font size='4' color='#004080'><b>Isotropic Atoms</b></font><br>When you see the periodic table, type the word 'pers' - and you will see a sphere representation of the atoms. You can now modify the settings for the isotropic view of atoms.

<h1>BONDS</h1>
TBI

<h1>BOND_PROPERTIES</h1>
Here are a number of functions one can use to help with arrangement of molecules:<br><br><font size='4' color='#004080'><b>Cell</b></font><br>Toggles between showing the unit cell OFF/ON.<br><br><font size='4' color='#004080'><b>Base</b></font><br>Toggles between showing the basis vectors OFF/ON.<br><br><font size='4' color='#004080'><b>Box Function 1</b></font><br>TBI<br><br><font size='4' color='#004080'><b>Box Function 2</b></font><br>Draws a box around your mocecule.<br><br><font size='4' color='#004080'><b>Align</b></font><br><br><br><font size='3' color='#004080'><b>View</b></font>: &nbsp;This shows the suggested best view of the molecule.<br><br><font size='3' color='#004080'><b>Plane</b></font>: &nbsp;Shows the mean square plane of the molecule.<br><br><font size='3' color='#004080'><b>Locking Functions</b></font>: &nbsp;These boxes can be ticked in order to stop the system from rotating, zooming or translating the molecule. You can also choose to lock them all or lock separate components.

<h1>ADD_FOG</h1>
These functions can add a fade to your molecule or the background in order to see the molecule better.

<h1>ROTATE</h1>


<h1>ROTATE</h1>
Using this tool, you can control the rotation of the molecule on the screen in a somewhat more fine-grained and repeatable way compared to what can be achieved with the mouse.<br><br><font size='4' color='#004080'><b>Rotate around the axis x, y and z</b></font><br>Enter the degrees of rotation into the spin boxes, then press the buttons to rotate either in the negative or positive direction.<br><br><font size='4' color='#004080'><b>Even finer control</b></font><br>Using the command line, rotation about fractions of degrees are also possible:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=rota 2 -10.2","hint=rota 2 -10.2","onclick=rota 2 -10.2","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will rotate the structure around the y axis by -10.2 degrees.</td></tr></tbody></table>

<h1>AUTO_ROTATION</h1>


<h1>AUTO_ROTATION</h1>
This automatically rotates the structure; x rotates the structure from top to bottom, y rotates from left to right and z rotates around in the plane of the page. The speed of rotation can be set using the slider bar. Clicking on a, b or c resets the view to look down the specific axis.This is maybe not very useful, but can be fun.

<h1>ZOOM_SLIDER</h1>
This slider allows you to zoom in and out of your structure. Zooming can also be done by holding down the left mouse key and moving the mouse.

<h1>STEREO_VIEW</h1>


<h1>STEREO_VIEW</h1>
Depending on the hardware you use, there are various options of obtaining a stereo view for your structures.<br><br><font size='4' color='#004080'><b>Color stereo</b></font><br>This results in grey-scale colour for colours matching with colours of the glasses<br><br><font size='4' color='#004080'><b>Anaglyph</b></font><br>Rendering of two spatially separated projections. To be viewed without glasses, but eyes need to be 'crossed'<br><br><font size='4' color='#004080'><b>Hardware stereo</b></font><br>Requires special hardware<br><br><font size='4' color='#004080'><b>Interlaced stereo</b></font><br>Also requires special hardware to be viewed correctly<br><br><font size='4' color='#004080'><b>Normal View</b></font><br>Returns to the normal display mode !!!More Info Online!!!

<h1>SYMMETRY_TOOLS</h1>
Tools for growing your structure, changing the composition/location of the asymmetric unit and viewing the basis vectors and cell.

<h1>SYMMETRY_TOOLS_1</h1>
The tools in this row are useful for re-organising parts of a structure if there is more than one moiety present in the structure.<br><br><font size='4' color='#004080'><b>Move Near</b></font><br><ol><li>Select the atom to which you want to move another moiety close to.</li><li>Activate the mode by clicking on the 'Move Near' button.</li><li>Click on on atom of each moiety that you wish to move close to the previously selected atom</li></ol><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode move","hint=mode move","onclick=mode move","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td></td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Copy Near</b></font><br><ol><li>Select the atom to which you want to copy another moiety close to.</li><li>Activate the mode by clicking on the 'Copy Near' button.</li><li>Click on on atom of each moiety that you wish to copy close to the previously selected atom</li></ol><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode move -c","hint=mode move -c","onclick=mode move -c","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td></td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Assemble</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq","hint=compaq","onclick=compaq","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244") , $+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -a","hint=compaq -a","onclick=compaq -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>In cases where parts of your structure have become fragmented or 'disjointed', this command will re-assemble the fragments.</td></tr></tbody></table>

<h1>SYMMETRY_TOOLS_2</h1>
Tools in this row will achieve centering of the moieties in a stucture.<br><br><font size='4' color='#004080'><b>Centre on Cell</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=move","hint=move","onclick=move","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All moieties in the structure will be centred on the cell.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Centre on Largest Part</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=move","hint=move","onclick=move","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All moieties in the structure will be centred on the largest moiety.</td></tr></tbody></table>

<h1>SYMMETRY_TOOLS_3</h1>
These tool switch symmetry related items on the screen on and off.<br><br><font size='4' color='#004080'><b>Show Basis</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=basis","hint=basis","onclick=basis","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Displays/Hides the basis vectors of this structure.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Show Cell</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=cell","hint=cell","onclick=cell","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Displays/Hides a drawing of the unit cell.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Quality</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=qual -l","hint=qual -l","onclick=qual -l","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244") , $+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=qual -m","hint=qual -m","onclick=qual -m","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244") , $+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=qual -h","hint=qual -h","onclick=qual -h","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Changes the quality setting in which atoms are drawn. A lower quality can be useful if the computer struggles with larger structures.</td></tr></tbody></table>

<h1>SYMMETRY_TOOLS_4</h1>
<br><br><font size='4' color='#004080'><b>Fuse</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fuse","hint=fuse","onclick=fuse","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Display the asymmetric unit of the structure only. All symmetry generated atoms will be removed.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Grow All</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow","hint=grow","onclick=grow","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All symmetry equivalent atoms that are required to show the 'complete' structure will be generated. Of course, in the case of polymeric structures, this is somewhat arbitrary, and more controlled growing conditions will need to be employed.</td></tr></tbody></table>

<h1>GROWING</h1>
Olex2 shows the asymmetric unit by default. The tools combined here in three drop-down boxes are very powerful, and will allow you to 'assemble' your structure in exactly the way you want it to be. In Olex2 you can keep refining your structure without 'destroying' the assembly you have created.<br><br><font size='4' color='#004080'><b>Grow</b></font><br><br><br><font size='3' color='#004080'><b>Grow All</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow","hint=grow","onclick=grow","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All 'missing' connected symmetry equivalent atoms will be generated.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Shells</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -s","hint=grow -s","onclick=grow -s","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will grow atoms shell-by-shell from the currently displayed image.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Complete</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -w","hint=grow -w","onclick=grow -w","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will generate all missing symmetry equivalent atoms of an already grown structure, independent of whether these are bound to the main fragment or not. In other words: all solvent molecules and counter-ion will be generated according to what is already shown.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Asym. Unit</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fuse","hint=fuse","onclick=fuse","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Removes all symmetry equivalent atoms and displays the asymmetric unit.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Complete shown growing bonds</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -b","hint=grow -b","onclick=grow -b","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If you are in a growing mode, then clickable growing bonds will be shown. All of these can be grown</td></tr></tbody></table>

<h1>MODE_GROW</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow","hint=mode grow","onclick=mode grow","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Similar to grow, but now this command will be executed only after you click on an object. When you enter a growing mode, clickable 'growing bonds' will sprout from atoms where the kind of growing you have asked for is applicable.</td></tr></tbody></table>There are various modifiers for this command:<br><br><font size='3' color='#004080'><b>Short Contacts</b></font>: &nbsp;||$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -s","hint=mode grow -s","onclick=mode grow -s","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")||Will show these growable 'bonds' to those atoms where 'short interactions' exist.<br><br><font size='3' color='#004080'><b>Selection</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -r","hint=mode grow -r","onclick=mode grow -r","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show growable 'bonds' to other occurances of the currently selected atoms.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Van der Waals Radii</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -v 2.0","hint=mode grow -v 2.0","onclick=mode grow -v 2.0","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show growable 'bonds' to other occurances of the currently selected atoms that are at least the indicated distance away from the selected atom.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Move</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -a","hint=mode grow -a","onclick=mode grow -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>when you click on growable bonds the symmetry equivalent atom will be moved to the new position. This is really useful when you are trying to assemble a meaningful asymmetric unit for extended structures (polymers).</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Shells</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -s","hint=grow -s","onclick=grow -s","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will grow atoms shell-by-shell from the currently displayed image.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Assemble</b></font><br>This tool does not strictly belong to the 'growing' family of tools, but it is frequently used together with the growing tools. It allows you to re-arrange the asymmetric unit contents into a different configuration.<br><br><font size='3' color='#004080'><b>Broken Fragments</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -a","hint=compaq -a","onclick=compaq -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sometimes, your structure may become 'broken' - parts that should be bonded are shown as separate fragments. This tool will bring them back together.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Atom-to-Atom</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -c","hint=compaq -c","onclick=compaq -c","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Similar to the 'Broken Fragments' tool, but a different algorithm is used.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Metal Last</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -m","hint=compaq -m","onclick=compaq -m","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>In this tool, metal ions are taken out of the equation at first (which is very useful when trying to assemble a ligand!) and then the metal ion is placed at the shortest possible distance.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Q-Peaks</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -q","hint=compaq -q","onclick=compaq -q","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will move all electron density peaks as closely to existing atoms as possible.</td></tr></tbody></table>

<h1>PACKING</h1>
Packing options to display the packing of your structure.<br><br><font size='4' color='#004080'><b>Pack Close Contact</b></font><br>Use the slider bar to set the distance from atoms that you want clickable growing options to be displayed.<br><br><font size='4' color='#004080'><b>Pack Radius</b></font><br>Move the slider to adjust the radius around the original molecule where symmetry equivalent molecules should be shown.<br><br><font size='4' color='#004080'><b>Pack to limits</b></font><br><br><br><font size='3' color='#004080'><b>Pack to limit</b></font>: &nbsp;Packs the structure within the limits defined for a, b and c.<br><br><font size='3' color='#004080'><b>Fill Unit Cell</b></font>: &nbsp;Displays all atoms within the unit cell.<br><br><font size='3' color='#004080'><b>Complete Fragments</b></font>: &nbsp;Completes any fragments that are only partially displayed as a result of the various packing options.

<h1>HISTORY-TARGET</h1>
All refinements and
solution of your structure
are available from here.

<h1>HISTORY</h1>
Every step along the process of structure solution and refinement is automatically databased within Olex2 - the 'History'. Click on one of the bars to return to the structure as it was then.

<h1>HISTORY_TREE</h1>
Every time a structure is solved, a new history branch is created. Using the drop-down menu, the latest structure stored in the selected branch will automatically be loaded. It is possible to delete and rename branches. To return to an earlier structure solution or different branch of a refinement click on the appropriate structure solution or refinement branch.

<h1>NAMING-HELP</h1>


<h1>NAMING</h1>
This GUI can be used for naming atoms in a molecule. However, in some cases it might be better to use the command line to name atoms more efficiently.<br><br><font size='4' color='#004080'><b>Using The GUI</b></font><br>After pressing the 'GO' button, you will be in a mode. That means, that something will happen to all subsequently clicked atoms. In this case:<br><br><font size='3' color='#004080'><b>Start</b></font>: &nbsp;The clicked atom will be named with the Current atom type (unless 'Type' is set to something else) and numbered starting from the number that is entered in this box.<br><br><font size='3' color='#004080'><b>Suffix</b></font>: &nbsp;A suffix will be given to the atom, with all other settings in place.<br><br><font size='3' color='#004080'><b>Type</b></font>: &nbsp;The atom type of the atom will be changed as well as all other settings will be applied.<strong>Note</strong>: When you are in a mode, the mouse pointer changes. In some modes it simply becomes a hand-symbol, but in other cases the pointer will tell you what will happen if you click on an atom.<br><br><font size='4' color='#004080'><b>Using the Command Line</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name sel type","hint=name sel type","onclick=name sel type","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will change all currently selected atoms into the new type.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name sel integer","hint=name sel integer","onclick=name sel integer","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will re-number all currently selected atoms in the order of which they were selected starting from.</td></tr></tbody></table>

<h1>AUTOMATIC_HYDROGEN_NAMING</h1>
Olex2 will keep track of the naming of hydrogen atoms automatically. This feature can be switched off by unticking the 'Automatic Hydrogen Naming' box.

<h1>MATCH_NAMING</h1>
If you have a structure with two or more matching moieties, you only need to name one of these. Olex2 will then match this naming scheme to the other molecule.This is important in structures with Z' larger than 1 and also in structures where a metal is coordinated to more than one ligand of the same type. In this case you will need to set the maximum number of bonds for the central metal ion to 0 (right-click, then Bonds).Select <strong>any one atom</strong> of the correctly named molecule, and then select <strong>any one atom</strong> of the <em>other</em> molecule.<br><br><font size='4' color='#004080'><b>Add a suffix</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=match sel -n=suffix","hint=match sel -n=suffix","onclick=match sel -n=suffix","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Enter a suffix character into the box, then click the link.This will transfer the naming scheme of the first molecule to the second molecule with the suffix letter you have chosen.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Replace a suffix</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=suffix'&gt;match sel -n=\$suffix","hint=suffix'&gt;match sel -n=\$suffix","onclick=suffix'&gt;match sel -n=\$suffix","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Instead of merely adding a suffix, you can also replace the first character of the original naming scheme with another character. This is useful, for example, if you wish to name all atoms in one ligand like C101, C102, C102 ... and corresponding atoms in the other ligand like C201, C202, C203 ...</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Replace last character</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=suffix'&gt;match sel -n=-suffix","hint=suffix'&gt;match sel -n=-suffix","onclick=suffix'&gt;match sel -n=-suffix","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Equally, the last character of an atom name can be replaced</td></tr></tbody></table>There is no GUI for these replacements, you will have to type the lines above from the command line.

<h1>REFINEMENT_PROGRAM</h1>
Apart from its own refinement engine (olex2.refine), Olex2 also supports all variants of ShelXL. Depending on the refinement package, different refinement methods are available.<br><br><font size='4' color='#004080'><b>olex2.refine</b></font><br>Our own refinement engine. It supports all ShelXL instructions, plus a number of new restraints and constraints that are not available from ShelXL. You can switch between this engine and ShelXL, and Olex2 will not 'forget' the special instructions that are available only in olex2.refine, but of course ShelXL won't heed them.<br><br><font size='4' color='#004080'><b>ShelXL-20XX</b></font><br>Since 2012, modern versions of ShelXL have been released by George Sheldrick. Please make sure that you check regularly whether you have the latest version of the ShelX programs installed -- these are the <strong>only versions</strong> that should be used. In fact, you can use any version you wish, as long as it is on the path and is called 'shelxl'. Our recommendation is to make yourself a folder on the root of one of your drives called 'CrystallographyPrograms' and then put that folder 'on the PATH'. Any (known) executable you place in that folder will be recognised by Olex2 and you will be able to use it from within Olex2

<h1>SET_REFLECTION_FILE</h1>
The reflection file contains all the data that were collected during the x-ray diffraction experiment in a condensed form.<br><br><font size='4' color='#004080'><b>hkl</b></font><br>The standard format for a reflection file is the 'hkl' file. From this drop-down menu, you can choose which file you want to refine your model against. There is no need to rename anything - just choose the file and then press refine.

<h1>REFINEMENT_MAX_CYCLES</h1>
Some refinement programs (e.g. SHELXL) will continue refining up to a maximum number of cycles. Here you can set this number. olex.refine will go up to the maximum number, but might stop beforehand if the refinement is settled.<br><br><font size='4' color='#004080'><b>From the Command Line</b></font><br>You can simply type, for example:$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=refine 4 5","hint=refine 4 5","onclick=refine 4 5","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")meaning that 4 cycles of refinement will be carried out and that you will be shown 5 residual electron density peaks once the refinement has finished. The values will be remembered for future refinements.

<h1>WEIGHTING_SCHEME</h1>
<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=weight","hint=weight","onclick=weight","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>A weighting scheme should be applied to your data. This is usually done when your model is finished.</td></tr></tbody></table>All refinement programs will suggest a suitable weighting scheme. By clicking on the coloured line you will apply these suggestions. By ticking the box, Olex2 will automatically update to the suggested values after each cycle.

<h1>EXTINCTION_CORRECTION</h1>
Extinction affects the intensity of reflections and can result in systematically absent reflections being observed under special conditions. This parameter is designed to account for the intensity changes associated with extinction, the method used is a compromise to cover primary and secondary extinction. In general this should not be included until all of the non-hydrogen atoms have been located.

<h1>REFINEMENT_MASKS</h1>
In some structures, solvent disorder can be so severe that modelling this disorder using atomic sites (i.e. partially occupied atoms) is neither possible nor sensible. In these cases, it is better to not even attempt to model the 'affected area' - but to simply leave the measured electron density in place. This technique requires the calculation of the area that should be 'taken out of the refinement' - and defining <em>that</em> depends on the current structure.<br><br><font size='4' color='#004080'><b>Defining the volume to be masked</b></font><br><br><br><font size='3' color='#004080'><b>Use solvent mask</b></font>: &nbsp;Include in the refinement a solvent contribution to the structure factors as the discrete Fourier transform of the electron density in the solvent area. The solvent mask can be calculated and displayed under Tools &gt; Maps &gt; Masks. When used with smtbx-refine, the solvent contribution is added internally to that calculated from the ordered part, whilst with SHELXL the solvent contribution is subtracted from the observed data before passing a modified hkl file to the external refinement program.<br><br><font size='3' color='#004080'><b>Recompute mask before refinement</b></font>: &nbsp;When ticked, the solvent mask will be recomputed before the start of the refinement. This can lead to an improved solvent mask, particularly if the ordered part of the structure was poorly converged before the initial mask search.

<h1>REFINEMENT_SETTINGS_EXTRA</h1>
TBI

<h1>REPORT</h1>
Here is a collection of tools that can help you to form a report about your structure.

<h1>H3-COLLECTION-HELP</h1>


<h1>COLLECTION</h1>
Here you can enter any information you might have concerning the Data Collection of your structure.<strong>Information entered in these boxes will take precedence over information provided in files</strong>. If you edit the CIF information using the 'Edit Cif Info' button above, then that will take precedence over what you entered here (and the new values will be displayed in these boxes).

<h1>H3-CRYSTAL-HELP</h1>


<h1>CRYSTAL</h1>
Here you can enter any information you might have concerning the Crystal itself.<strong>Information  entered in these boxes will take precedence over information provided in files</strong>. If you edit the CIF information using the 'Edit Cif Info' button above, then that will take precedence over what you entered here (and the new values will be displayed in these boxes).

<h1>H3-DIFFRACTION-HELP</h1>


<h1>DIFFRACTION</h1>
Here you can enter any information you might have concerning the Diffraction Experiment.<strong>Information entered in these boxes will take precedence over information provided in files</strong>. If you edit the CIF information using the 'Edit Cif Info' button above, then that will take precedence over what you entered here (and the new values will be displayed in these boxes).

<h1>H3-ABSORPTION_CORRECTION-HELP</h1>


<h1>ABSORPTION_CORRECTION</h1>
Information about your absorption correction should appear automatically from the files. If not, you need to enter this information manually here.

<h1>H3-PUBLICATION-HELP</h1>


<h1>PUBLICATION</h1>
Here you can enter any information you might have concerning the Publication details of your structure.<strong>Information entered in these boxes will take precedence over information provided in files</strong>. If you edit the CIF information using the 'Edit Cif Info' button above, then that will take precedence over what you entered here (and the new values will be displayed in these boxes).

<h1>CITATIONS</h1>
Olex2 automatically creates the citations of all software that was used during the structure determination (as long as this was used through Olex2 or can be found in the relevant files.

<h1>REFERENCE</h1>
Here you can enter any information about publication of your structure.<strong>Information  entered in these boxes will take precedence over information provided in files</strong>. If you edit the CIF information using the 'Edit Cif Info' button above, then that will take precedence over what you entered here (and the new values will be displayed in these boxes).

<h1>H3-SOURCE_FILES-HELP</h1>


<h1>SOURCE_FILES</h1>
Olex2 reads your source files, and extracts relevant information to include into the cif file. This process is not always easy, and can result in conflicts. In this section you can inspect which files Olex2 has read.

<h1>CIF-PART-1-HELP</h1>


<h1>CIF_PART_1</h1>
This section deals with your CIF file. The CIF file contains everything that is known about your structure in a format that has been defined by the IUCr. Getting a complete and correct cif file is vital for the successful publication of your structures in any peer reviewed journals.Ideally, the creation of the CIF file should be completely automatic and you won't have to worry about it. But just in case, we provide a number of tools here to help you with your CIF files.<br><br><font size='4' color='#004080'><b>Edit CIF Info</b></font><br>Pressing this button will bring up a text editor, in which all the information that is known about your structure is shown. You can modify the contents of this file and even add and remove items. Your edits will take precedence over any previous values.<br><br><font size='4' color='#004080'><b>Merge CIF</b></font><br>This will open the current CIF of your structure - a file in which the 'meta-data' has been merged with the CIF that originated from your last refinement.<br><br><font size='4' color='#004080'><b>Include/Exclude HKL and RES in your CIF</b></font><br>Here you can determine whether you want to include the HKL/RES files in your final CIF or not. Please note: If you choose 'ignore', then nothing will be done to your CIF - the HKL/RES part will be included <strong>exactly</strong> as it was returned by the refinement program. ShelXL-2013 includes the HKL and RES information as plain text by default. If you select 'exclude', no HKL and res information will be included. If you choose 'include', the RES and HKL information will be included in the official IUCr/CIF definition format: as a loop.

<h1>CIF-PART-2-HELP</h1>


<h1>CIF_PART_2</h1>
The IUCr offer a free checking service for your CIF files.<br><br><font size='4' color='#004080'><b>The CheckCif report</b></font><br>This will help you to identify potential problems with your structure. Click the 'CheckCif Report' button to send your CIF file to the IUCr server and obtain your report in either html or pdf format. For a full report, you will also have to send your 'structure factors', which are contained in the fcf file. Tick the box if you want a full report.<br><br><font size='4' color='#004080'><b>Update Meta Info (Can't actually find this!!)</b></font><br>This tick-box is included here only for the very rare case where you might experience problems with the merging of the CIF created by the refinement program and the information contained within Olex2. If you ever feel the need to untick this box, please make sure to let us know what the problem was and we will try and fix it for everyone. Thanks!<br><br><font size='4' color='#004080'><b>CCDC Number</b></font><br>The first step in the submission to the CSD is to obtain a CCDC number. Pressing this button will do that for you: it will send your CIF file and your structure factor file (optional) to the CCDC. After a few days of processing in Cambridge, you will obtain an e-mail containing your CCDC submission number. A number will only be requested if <strong>all</strong> the required data is provided - so make sure you fill in all the forms as much as you can!

<h1>CIF-PART-3-HELP</h1>


<h1>CIF_PART_3</h1>
One of the really strong points of Olex2 is that it will keep your CIF information synchronised throughout the entire solution and refinement process. This is quite a tricky thing to do, but if it all works the way it should, you will never need to edit a CIF by hand again.<br><br><font size='4' color='#004080'><b>Merge CIF</b></font><br>If this box is ticked, the files that are listed in this line will all be merged with your CIF information. 'metacif' is the builtin-file where Olex2 collects all the information about your structure it can. You can edit this file using the 'Edit Cif Info' button above, and <strong>your edits will take precedence over all other sources of information</strong>. If something goes dreadfully wrong here, you may choose to untick this box. However, we really don't recommend this and if you feel that you need to do this, please contact us and we will try and find a solution to your problem. Thank you!

<h1>SELECT-ATOMS-HELP</h1>


<h1>SELECT_ATOMS</h1>
Selects the atom types listed.<br><br><font size='4' color='#004080'><b>Exclusive</b></font><br>Selects only the types that are clicked on.<br><br><font size='4' color='#004080'><b>Additive</b></font><br>Adds the clicked types to the selection.<br><br><font size='4' color='#004080'><b>Command Line Examples</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel \$c","hint=sel \$c","onclick=sel \$c","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Selects all C atoms</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel -u","hint=sel -u","onclick=sel -u","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Deselects everything</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel c1","hint=sel c1","onclick=sel c1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Selects C1</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel \$c \$n","hint=sel \$c \$n","onclick=sel \$c \$n","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Selects all C and N atoms</td></tr></tbody></table>

<h1>SELECTIONS-HELP</h1>


<h1>SELECTIONS</h1>
Line before a table<br><br><font size='4' color='#004080'><b>Invert</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel -i","hint=sel -i","onclick=sel -i","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Inverts the current selection.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Deselect</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel -u","hint=sel -u","onclick=sel -u","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Deselects (unselects) the all selected atoms.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Delete</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=kill sel","hint=kill sel","onclick=kill sel","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Deletes all selected atoms. Same as pressing the 'Delete' key. Undo with <strong>CTRL+Z</strong>.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Previous Selection</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=selback","hint=selback","onclick=selback","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Re-select all atoms of the previous selection.</td></tr></tbody></table>

<h1>SELECT-CRITERIA-HELP</h1>


<h1>SELECT_CRITERIA</h1>
To select all atoms for which Uiso is within user defined parameters.

<h1>SELECT-RINGS-HELP</h1>


<h1>SELECT_RINGS</h1>
Select all rings of the specified type (for example) C6, C5N, C5, C5O within the structure. You can type your own ring criteria in the box.

<h1>SOLUTION_PROGRAM</h1>
If particular solution programs are installed in a standard way on your system, Olex2 will find them and they will appear automatically as a choice in the drop-down menu. If they don't appear, please make sure that the directory where they are installed is either on the System Path, or has been entered under <strong>Home &gt; Settings &gt; Path</strong>. Please search the web for more information if you have any trouble with this.<br><br><font size='4' color='#004080'><b>Choice of Programs</b></font><br>Olex2 can make use of many structure solution programs such as<ul><li><strong>ShelXT</strong></li><li>ShelXS</li><li>ShelXD</li><li>olex2.solve</li><li>SuperFlip</li><li>Sir2011</li><li>Sir2008</li></ul><br><br><font size='4' color='#004080'><b>Solution Method</b></font><br>Select the method you want to use for Structure Solution program. This is only really relevant for <strong>ShelXS</strong> -- all other programs only have one solution method!

<h1>SET_REFLECTION_FILE</h1>
The reflection file contains all the data that were collected during the x-ray diffraction experiment in a condensed form.<br><br><font size='4' color='#004080'><b>hkl</b></font><br>The standard format for a reflection file is the <strong>hkl</strong> file. From this drop-down menu, you can choose which file you want to refine your model against. There is no need to rename anything - just choose the file and then press refine.<br><br><font size='4' color='#004080'><b>Other Formats</b></font><br>Other file formats (including <strong>raw</strong> and **

<h1>CHEMICAL_FORMULA</h1>
The expected chemical composition for the structure. The presence of heavy atoms in the expected composition when they are not actually present in the structure can adversely affect some structure solution programs and vice-versa.

<h1>Z</h1>
Z denotes the number of fomula units in the UNIT CELL.<br><br><font size='4' color='#004080'><b>What is this about?</b></font><br>For molecular compounds this number is easy to see - just count the number of full molecules in the unit cell. For continuous solids and structures that need to be 'grown' it is not always easy to determine this number.<strong>Note</strong>: Z' (Z prime) is related to this, and denotes the number of formula units in the asymmetric unit.

<h1>SPACE-GROUP-HELP</h1>


<h1>SPACE_GROUP</h1>
Usually, you will have determined the space group during data processing.<br><br><font size='4' color='#004080'><b>Suggest SG</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sg","hint=sg","onclick=sg","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Olex2 can also determine the space group. Press the 'Suggest SG' link and the most likely choices will appear in the drop-down box on the right. You can type 'text' to see the full output of the data analysis.</td></tr></tbody></table>You can also type any space group into the box - when leaving the box, your structure will be set up ready to solve in that new space group.

<h1>SOLUTION_SETTINGS_EXTRA</h1>
TBI

<h1>SORTING_CAT</h1>
TBI

<h1>SORTING_MOIETY</h1>
TBI

<h1>SORTING_SPECIFICS</h1>
TBI

<h1>TOOLBOX_WORK-TARGET</h1>
A collection of useful tools
- Make all peaks Carbon
- Move Atoms
- Show/Hide Peaks
- Expand Short Contacts
- Peak Slider
- Disorder Tools

<h1>LABELS</h1>
You can select what you would like to see as labels in the molecule display. If a particular property is not applicable for a particular atom, there will be no label.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=help labels","hint=help labels","onclick=help labels","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>To see all the command line options for the labels</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Toggle On/Off</b></font><br>This is to display or hide atom or Q-peak labels. It will switch other types of labelling off, but selecting it again will display atom name labels. [F3] does the same thing.<br><br><font size='4' color='#004080'><b>Atom Names</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -l","hint=labels -l","onclick=labels -l","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All atom names of <strong>non-hydrogen atoms</strong> will be displayed next to the atoms.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Crystallographic Occupancy</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -o","hint=labels -o","onclick=labels -o","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This displays the crystallographic occupancy of any atoms which are not 100% occupied i.e. their occupancy is not 1.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Chemical Occupancy</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -co","hint=labels -co","onclick=labels -co","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Displays the 'chemical occupancy' on the labels. Basically, the occupancy values for atoms that are located on symmetry elements are not shown.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Parts</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -p","hint=labels -p","onclick=labels -p","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Displays PART numbers for any atoms not in PART 0.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Link Codes</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -lo","hint=labels -lo","onclick=labels -lo","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If atoms are linked, the link code will be shown. (FVAR 21/-21 in ShelXL language)</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>H Atom Labels</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -h -l","hint=labels -h -l","onclick=labels -h -l","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will include the hydrogen atom labels along with the atom name and Q-peak labels</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Variables</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -v","hint=labels -v","onclick=labels -v","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Displays any atoms where the occupancy is linked to any variable</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>AFIX Commands</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -a -h","hint=labels -a -h","onclick=labels -a -h","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This is useful to check the AFIX commands that are being applied to the structure</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Q-Peak Intensities</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -qi","hint=labels -qi","onclick=labels -qi","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Relative intensities of the Q-peaks will be displayed on the structure</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Residue Numbers</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -rn","hint=labels -rn","onclick=labels -rn","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Show the number of the residue an atom belongs to</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Residue Class</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=labels -rc","hint=labels -rc","onclick=labels -rc","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Show the number of the residue class an atom belongs to</td></tr></tbody></table>

<h1>TOOLBAR_MODEL</h1>
This is a collection of three basic tools needed for model building.<br><br><font size='4' color='#004080'><b>Assign Atom Types</b></font><br>All atom types that are currently in your formula are represented as a small button.<br><br><font size='3' color='#004080'><b>Using the GUI</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$spy.MakeElementButtonsFromFormula('mode')</td><td>All atoms present in the model are shown.</td></tr></tbody></table>You can click on one of these buttons and it will go into an atom type assignment mode for this particular atom type. Atoms you click subsequently will become that atom type. Alternatively, you can make a selection of atoms first, and then click the atom type symbol. The buttons will appear red if there are fewer atoms of that type in your model compared to the formula you have initially given. They turn green if the numbers do agree.<br><br><font size='3' color='#004080'><b>Using the Command Line</b></font>: &nbsp;It is usually much more efficient to assign atom types using the keybard. Here are the three essential command you need to know:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name sel C","hint=name sel C","onclick=name sel C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Turns all selected atoms into carbon</td></tr><tr><td>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode name C","hint=mode name C","onclick=mode name C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Mode, where subsequently clicked atoms will turn into carbon atoms</td></tr><tr><td>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name \$Q C","hint=name \$Q C","onclick=name \$Q C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Turns all Q-peaks into carbon atoms</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Geometrically Place Hydrogen Atoms</b></font><br>Pressing this button will cause Olex2 to place hydrogen atoms geometrically. If there is no selection of atoms, hydrogen atoms will be placed where possible. If there is a selection, they will only be added to the selected atoms.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=hadd","hint=hadd","onclick=hadd","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Adds hydrogen atoms to all selected atoms (or all, if none selected)</td></tr><tr><td>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=hadd 137","hint=hadd 137","onclick=hadd 137","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will use specifed AFIX <strong>if possible</strong>. (137 adds three hydrogen atoms to a methl group, for example.</td></tr><tr><td>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=hadd -137","hint=hadd -137","onclick=hadd -137","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If the connectivity does not allow the addition of the specified AFIX atoms, it is still possible to place them in this way. Two atoms must be selected to denote a vector, with the atom to which hydrogen atoms are to be added selected <em>first</em></td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Toggle Isotropic/Anisotropic</b></font><br>With these buttons, you can make atoms either isotropic or anisotropic. If there is no selection this will apply to all atoms; if there is a selection, then this change will only apply to the selection.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=isot","hint=isot","onclick=isot","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All selected atoms will be refined <strong>isotropically</strong></td></tr><tr><td>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=anis","hint=anis","onclick=anis","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All selected atoms will be refined <strong>anisotropically</strong> (ellipsoids will result)</td></tr></tbody></table><br><br><b><font color='$spy.GetParam(gui.red)'>Note: </font></b> If the tickbox is ticked, then refinement will happen automatically after changing either <strong>isot</strong>, <strong>anis</strong> or <strong>hadd</strong>.

<h1>QUICKTOOLS</h1>
This is a selection of the tools needed for model building.<br><br><font size='4' color='#004080'><b>Affect atoms in the model or whether they are shown</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name \$Q C","hint=name \$Q C","onclick=name \$Q C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-QC','name \$Q C')</td><td>This tool will change all visible electron density peaks to Carbon atoms, regardless of the peak height.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name \$Q H","hint=name \$Q H","onclick=name \$Q H","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-QH','name \$Q H')</td><td>All visible Q-peaks will be turned into Hydrogen atoms</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=clean","hint=clean","onclick=clean","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-tidy','clean')</td><td>Tidy the Structure: Small and geometrically impossible peaks will be removed, all remaining peaks will be turned into Carbon.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=kill \$H","hint=kill \$H","onclick=kill \$H","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-killH','kill \$H')</td><td>Deletes all selected Hydrogen atoms from your structure. If no hydrogen atoms are selected, all will be deleted. Undo with <strong>Ctr+Z</strong>.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showQ","hint=showQ","onclick=showQ","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-Q','showQ')</td><td><strong>CTRL+Q</strong>. Toggle between three states: Show electron density peaks, show them with bonds or hide them.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showH","hint=showH","onclick=showH","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-H','showH')</td><td><strong>CTRL+H</strong>. Toggle between three states: Show H atoms, show them with H-bonds or hide them. Hydrogen atoms remain in the model.</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq&gt;&gt;compaq-a&gt;&gt;center","hint=compaq&gt;&gt;compaq-a&gt;&gt;center","onclick=compaq&gt;&gt;compaq-a&gt;&gt;center","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-center','compaq>&gt;compaq -a>&gt;center')</td><td>Fragments will be assembled and the structure will be centered on the screen.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Affect the fomula of the structure</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>Z'</td><td>Set the value of Z' here. For a molecular structure this is typically the sum formula of the molecule. If there are two independent molecules on the screen, Z' must be set to 2. If the molecule needs to be grown, Z' will smaller than one (often 0.5).</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fixunit","hint=fixunit","onclick=fixunit","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>$spy.MakeHoverButton('toolbar-OK','fixunit')</td><td>Adjusts the sum formula to what is currently present in the model, taking the value of Z' into account.</td></tr></tbody></table>

<h1>PART_LINKS</h1>
This is a selection of quick-links regarding displaying of PARTS in your structure. The command-line equivalents are also very useful to know:<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showp 0 1","hint=showp 0 1","onclick=showp 0 1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Shows all atoms in no particular part and all atoms in PART 1</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showp 0 2","hint=showp 0 2","onclick=showp 0 2","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Shows all atoms in no particular part and all atoms in PART 2</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showp 1","hint=showp 1","onclick=showp 1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Shows only the atoms PART 1</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=showp","hint=showp","onclick=showp","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Show all parts</td></tr></tbody></table><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel part 1","hint=sel part 1","onclick=sel part 1","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Selects all atoms in PART 1</td></tr></tbody></table>The use of the <strong>UP</strong> key is particularly useful in this context!

<h1>SPLIT_GROUP</h1>
The tools on this line will fully SPLIT the atom you click next into two atoms.<br><br><font size='4' color='#004080'><b>No Restraints</b></font><br>This will simply generate two atoms (at the focal points of the ellipsoids) and set the occupancies for each atom to 0.5. One of the atoms will be in PART 1, the other in PART 2. After the splitting has occured, you can move the newly 'generated' atoms to where you would like them to be (by holding the SHIFT key while moving them).<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode split","hint=mode split","onclick=mode split","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Splits subsequently clicked atoms</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>EADP</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode split -r=EADP","hint=mode split -r=EADP","onclick=mode split -r=EADP","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will split the atom as above, but will restrain the ADP values for both atoms to be the same. This is useful early on, and should probably be removed once the disorder model is nearly complete. You might want to apply the DELU restraint instead.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>ISOR</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode split -r=ISOR","hint=mode split -r=ISOR","onclick=mode split -r=ISOR","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will split the atom as above, and reply an ISOR restraint to each of the two atoms.</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>SIMU</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode split -r=SIMU","hint=mode split -r=SIMU","onclick=mode split -r=SIMU","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>As above, but with a SIMU restraint.</td></tr></tbody></table>

<h1>FIT_GROUP</h1>
This tool operates on a selection of atoms, which can consist of any number of atoms.<br><br><font size='4' color='#004080'><b>Fit or Split One Atom</b></font><br>Select one atom, then select whether you want to fit or split the atom. If you want to <strong>fit</strong> the atom, you can now move that atom with the left mouse to any position you like by pressing the <strong>SHIFT</strong> key; when you are finished, press the <strong>Esc</strong> key.If you want to split the atom, you will now see <strong>two</strong> atoms, both of which you can move with the left mouse while holding the <strong>SHIFT</strong> key pressed. The occupancies of the two atoms are linked, and the atoms will now belong to different parts.<br><br><font size='4' color='#004080'><b>Fit or Split Two Atoms</b></font><br>Select two atoms, then select whether you want to fit or split the group. Split will generate a duplicate group, fit will not.While pressing the <strong>SHIFT</strong> key, you can move the selection as a group. While pressing the <strong>CTRL</strong> key, you can rotate the group around the midpoint between the two atoms.<br><br><font size='4' color='#004080'><b>Fit or Split Three or more Atoms</b></font><br>Select three or more atoms, then select whether you want to fit or split the group. Split will generate a duplicate group, fit will not.While pressing the <strong>SHIFT</strong> key, you can move the entire group. You can now <strong>activate</strong> any bond around which you wish to rotate the group by <strong>right-clicking</strong> on it. While pressing the <strong>Ctrl</strong> key, you can rotate the group around this activated bond.When you are done, press the <strong>Esc</strong> key.<br><br><font size='4' color='#004080'><b>Split SAME</b></font><br>This is one of the most powerful tools in Olex2. If a grouping of atoms is disordered, and you can model one of the parts (no matter how badly), this tool is what you need. Simply select the entire grouping you wish to split, then press this button (or type <strong>mode fit -s same</strong>) and you can now generate a duplicate grouping. Everything will be constrained, so if this <em>can</em> be modelled, then the refinement will sort this out all by itself -- sometimes a large number of refinement cycles is needed.<br><br><font size='4' color='#004080'><b>Split or move with <strong>SHIFT</strong></b></font><br>This tool can also be used to move any atom (including Hydrogen atoms) to any position. Left click on the atom while pressing the <strong>SHIFT</strong> key - and you can move any atom where you would like it to be. Any constraints and restraints applied to that atom will still apply. When you are done, press the <strong>Esc</strong> key.<br><br><b><font color='$spy.GetParam(gui.red)'>Note: </font></b> If you click on an atom without holding down the <strong>SHIFT</strong> key, the atom will be split! So take great care with this tool!

<h1>ELECTRON_DENSITY</h1>
The electron density viewer will calculate various electron density maps and allowsthe display of these in a variety of formats.<br><br><b><font color='$spy.GetParam(gui.red)'>Note: </font></b> Close to zero, these maps become very messy (and slow to display). Olex2 therefore does not display these regions.<br><br><font size='4' color='#004080'><b>Available maps</b></font><br><br><br><font size='3' color='#004080'><b>diff</b></font>: &nbsp;Will calculate the difference map.<br><br><font size='3' color='#004080'><b>fcalc</b></font>: &nbsp;Will display the calculated electron density.<br><br><font size='3' color='#004080'><b>2Fo-Fc</b></font>: &nbsp;Will calculate the map of 2Fobs-Fcalc.<br><br><font size='4' color='#004080'><b>Available Source</b></font><br><br><br><font size='3' color='#004080'><b>olex</b></font>: &nbsp;Olex2 will calculate the structure factors.<br><br><font size='3' color='#004080'><b>fcf</b></font>: &nbsp;The structure factors will be read from a ShelXL fcf.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=CalcFourier","hint=CalcFourier","onclick=CalcFourier","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Calculates the map according to the settings set in the map tool.</td></tr></tbody></table>

<h1>PEAK_AND_UISO_SLIDERS</h1>
<br><br><font size='4' color='#004080'><b>Electron Density Peak Slider</b></font><br>Electron Density Peak Slider Move the slider to the <strong>left</strong> to filter out strongest peaks first, or to the <strong>right</strong> to filter out weakest peaks first. You can then do things like $+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=name \$Q C","hint=name \$Q C","onclick=name \$Q C","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244") - and this will only apply to the currently visible peaks. The same goes for the Select and Delete buttons.<br><br><font size='4' color='#004080'><b>Uiso Select Slider</b></font><br>This tool allows the selection of atoms according to their Ueq values.<br><br><font size='3' color='#004080'><b>Slide to the RIGHT</b></font>: &nbsp;This will select atoms where the Ueq value is LARGER than the value indicated by the slider.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel atoms where xatom.uiso &gt; 0.06 xatom.type!='Q'","hint=sel atoms where xatom.uiso &gt; 0.06 xatom.type!='Q'","onclick=sel atoms where xatom.uiso &gt; 0.06 xatom.type!='Q'","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td></td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Slide to the LEFT</b></font>: &nbsp;This will select atoms where the Ueq value is SMALLER than the value indicated by the slider.<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=sel atoms where xatom.uiso &gt; 0.08","hint=sel atoms where xatom.uiso &gt; 0.08","onclick=sel atoms where xatom.uiso &gt; 0.08","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Selects all atoms where the Uiso value is larger than 0.08</td></tr></tbody></table>

<h1>GROWING</h1>
Olex2 shows the asymmetric unit by default. The tools combined here in three drop-down boxes are very powerful, and will allow you to 'assemble' your structure in exactly the way you want it to be. In Olex2 you can keep refining your structure without 'destroying' the assembly you have created.<br><br><font size='4' color='#004080'><b>Grow</b></font><br><br><br><font size='3' color='#004080'><b>Grow All</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow","hint=grow","onclick=grow","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>All 'missing' connected symmetry equivalent atoms will be generated.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Shells</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -s","hint=grow -s","onclick=grow -s","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will grow atoms shell-by-shell from the currently displayed image.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Complete</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -w","hint=grow -w","onclick=grow -w","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will generate all missing symmetry equivalent atoms of an already grown structure, independent of whether these are bound to the main fragment or not. In other words: all solvent molecules and counter-ion will be generated according to what is already shown.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Asym. Unit</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=fuse","hint=fuse","onclick=fuse","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Removes all symmetry equivalent atoms and displays the asymmetric unit.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Complete shown growing bonds</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=grow -b","hint=grow -b","onclick=grow -b","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>If you are in a growing mode, then clickable growing bonds will be shown. All of these can be grown</td></tr></tbody></table><br><br><font size='4' color='#004080'><b>Mode Grow</b></font><br><table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow","hint=mode grow","onclick=mode grow","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Similar to grow, but now this command will be executed only after you click on an object. When you enter a growing mode, clickable 'growing bonds' will sprout from atoms where the kind of growing you have asked for is applicable.</td></tr></tbody></table>There are various modifiers for this command:<br><br><font size='3' color='#004080'><b>Short Contacts</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -s","hint=mode grow -s","onclick=mode grow -s","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show these growable 'bonds' to those atoms where 'short interactions' exist.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Selection</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -r","hint=mode grow -r","onclick=mode grow -r","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show growable 'bonds' to other occurances of the currently selected atoms.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Van der Waals Radii</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -v 2.0","hint=mode grow -v 2.0","onclick=mode grow -v 2.0","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Will show growable 'bonds' to other occurances of the currently selected atoms that are at least the indicated distance away from the selected atom.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Move</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=mode grow -a","hint=mode grow -a","onclick=mode grow -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>When you click on growable bonds the symmetry equivalent atom will be moved to the new position. This is really useful when you are trying to assemble a meaningful asymmetric unit for extended structures (polymers).</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Shells</b></font>: &nbsp;See above.<br><br><font size='4' color='#004080'><b>Assemble</b></font><br>This tool does not strictly belong to the 'growing' family of tools, but it is frequently used together with the growing tools. It allows you to re-arrange the asymmetric unit contents into a different configuration.<br><br><font size='3' color='#004080'><b>Broken Fragments</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -a","hint=compaq -a","onclick=compaq -a","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Sometimes, your structure may become 'broken' - parts that should be bonded are shown as separate fragments. This tool will bring them back together.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Atom-to-Atom</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -c","hint=compaq -c","onclick=compaq -c","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>Similar to the 'Broken Fragments' tool, but a different algorithm is used.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Metal Last</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -m","hint=compaq -m","onclick=compaq -m","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>In this tool, metal ions are taken out of the equation at first (which is very useful when trying to assemble a ligand!) and then the metal ion is placed at the shortest possible distance.</td></tr></tbody></table><br><br><font size='3' color='#004080'><b>Q-Peaks</b></font>: &nbsp;<table width='100%%'><tbody><tr><td width='25%%'>$+ html.Snippet("S:\olex2-trunk\util\pyUtil\PluginLib\plugin-GitHelp\gui-link","value=compaq -q","hint=compaq -q","onclick=compaq -q","flat=True",td1=, td2=, "fgcolor=#ffffff","bgcolor=#222244")</td><td>This will move all electron density peaks as closely to existing atoms as possible.</td></tr></tbody></table>

<h1>FINISHING</h1>
<br><br><font size='4' color='#004080'><b>Quick Sort</b></font><br>TBI<br><br><font size='4' color='#004080'><b>Quick Images</b></font><br>TBI